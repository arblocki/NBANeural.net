{"version":3,"sources":["components/Navbar/Navbar.js","components/PageHeader/PageHeader.js","components/Scoreboard/ProjectedGame.js","components/Scoreboard/FinalGame.js","components/Scoreboard/Scoreboard.js","containers/ScoresContainer.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","data-toggle","data-target","id","role","PageHeader","ProjectedGame","game","awayLogoLink","awayTeam","abbreviation","homeLogoLink","homeTeam","pickStyle","unitStr","pickStr","bet","units","spread","formatNeutralPickStr","team","formatActionPickStr","src","loading","alt","predScore","away","toFixed","home","FinalGame","resultStr","status","score","Scoreboard","games","map","ScoresContainer","props","state","date","Date","this","getGames","dateStr","getFullYear","toString","dateMonth","getMonth","length","dateDay","getDate","convertDate","window","location","includes","fetch","then","data","json","res","setState","ButtonDateInput","value","onClick","todayButton","selected","onChange","customInput","popperModifiers","preventOverflow","enabled","escapeWithReference","boundariesElement","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.86eb0acc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <div className='container'>\r\n      <nav className=\"navbar navbar-light navbar-expand-md\">\r\n        <div className=\"container-fluid\"><a className=\"navbar-brand\" href=\"#\">NBANeural.net</a><button data-toggle=\"collapse\" className=\"navbar-toggler\" data-target=\"#navcol-1\"><span className=\"sr-only\">Toggle navigation</span><span className=\"navbar-toggler-icon\"></span></button>\r\n          <div className=\"collapse navbar-collapse\"\r\n            id=\"navcol-1\">\r\n            <ul className=\"nav navbar-nav\">\r\n              <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"#scores\">Scores</a></li>\r\n              {/* <li className=\"nav-item\" role=\"presentation\"><a className=\"nav-link\" href=\"\">Model Performance</a></li> */}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport './pageheader.css';\r\n\r\nconst PageHeader = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"row\">\r\n        <div className=\"col title-info\">\r\n          <h1>NBANeural.net</h1>\r\n          <h4>Score projections and picks against the spread from a neural network algorithm</h4>\r\n        </div>\r\n        <div className=\"col-sm-12 col-md-4 record-col\">\r\n          <div className=\"card border-dark\">\r\n            <div className=\"card-header\">\r\n              <h5 className=\"mb-0\">2019-2020 Record ATS</h5>\r\n            </div>\r\n            <div className=\"card-body\">\r\n              <h1 className=\"text-center record\">93-74-7</h1>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default PageHeader;","import React from 'react';\r\n\r\nconst formatNeutralPickStr = (game) => {\r\n  var pickStr = (game.spread < 0) \r\n        ? game.homeTeam.abbreviation + ' ' + game.spread\r\n        : game.awayTeam.abbreviation + ' -' + game.spread;\r\n  return pickStr;\r\n}\r\n\r\nconst formatActionPickStr = (game) => {\r\n  var pickStr = '';\r\n  if (game.spread < 0) {\r\n    if (game.bet.team === game.homeTeam.abbreviation) {\r\n      pickStr = game.homeTeam.abbreviation + ' ' + game.spread;\r\n    } else {\r\n      pickStr = game.awayTeam.abbreviation + ' +' + (-1 * game.spread);\r\n    }\r\n  } else {\r\n    if (game.bet.team === game.homeTeam.abbreviation) {\r\n      pickStr = game.homeTeam.abbreviation + ' +' + game.spread;\r\n    } else {\r\n      pickStr = game.awayTeam.abbreviation + ' -' + game.spread;\r\n    }\r\n  }\r\n  return pickStr;\r\n}\r\n\r\nconst ProjectedGame = (game) => {\r\n  \r\n  const awayLogoLink = '/logos/' + game.awayTeam.abbreviation + '.svg';\r\n  const homeLogoLink = '/logos/' + game.homeTeam.abbreviation + '.svg';\r\n\r\n  var pickStyle = '';\r\n  var unitStr = '';\r\n  var pickStr = '';\r\n\r\n  if (game.bet.units === 0) {\r\n    pickStyle = 'grey';\r\n    unitStr = 'No Action';\r\n    pickStr = (game.spread === 0) \r\n      ? 'PK' \r\n      : formatNeutralPickStr(game); \r\n  } else {\r\n    pickStyle = 'green';\r\n    unitStr = game.bet.units + ' Unit Pick';\r\n    pickStr = (game.spread === 0) \r\n      ? game.bet.team + ' PK'\r\n      : formatActionPickStr(game);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card border-dark d-inline-flex scorecard\">\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col-3\">\r\n            <img className={\"team-logo away \" + game.awayTeam.abbreviation} src={awayLogoLink} loading=\"eager\" alt={game.awayTeam.abbreviation}></img>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <p className=\"score-type h5toh4\">Projected Score</p>\r\n            <p className=\"score-num\">{game.predScore.away.toFixed(1) + ' - ' + game.predScore.home.toFixed(1)}</p>\r\n          </div>\r\n          <div className=\"col-3\">\r\n          <img className={\"team-logo home \" + game.homeTeam.abbreviation} src={homeLogoLink} loading=\"eager\" alt={game.homeTeam.abbreviation}></img>\r\n          </div>\r\n        </div>\r\n        <div>\r\n          <span className={\"float-left spread line \" + pickStyle}>{pickStr}</span>\r\n          <span className={\"float-right spread pick \" + pickStyle}>{unitStr}</span></div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default ProjectedGame;","import React from 'react';\r\n\r\nconst formatNeutralPickStr = (game) => {\r\n  const pickStr = (game.spread < 0) \r\n        ? game.homeTeam.abbreviation + ' ' + game.spread\r\n        : game.awayTeam.abbreviation + ' -' + game.spread;\r\n  return pickStr;\r\n}\r\n\r\nconst formatActionPickStr = (game) => {\r\n  var pickStr = '';\r\n  if (game.spread < 0) {\r\n    if (game.bet.team === game.homeTeam.abbreviation) {\r\n      pickStr = game.homeTeam.abbreviation + ' ' + game.spread;\r\n    } else {\r\n      pickStr = game.awayTeam.abbreviation + ' +' + (-1 * game.spread);\r\n    }\r\n  } else {\r\n    if (game.bet.team === game.homeTeam.abbreviation) {\r\n      pickStr = game.homeTeam.abbreviation + ' +' + game.spread;\r\n    } else {\r\n      pickStr = game.awayTeam.abbreviation + ' -' + game.spread;\r\n    }\r\n  }\r\n  return pickStr;\r\n}\r\n\r\nconst FinalGame = (game) => {\r\n  \r\n  const awayLogoLink = '/logos/' + game.awayTeam.abbreviation + '.svg';\r\n  const homeLogoLink = '/logos/' + game.homeTeam.abbreviation + '.svg';\r\n\r\n  var pickStyle = '';\r\n  var resultStr = '';\r\n  var pickStr = '';\r\n\r\n  if (game.bet.units === 0) {\r\n    pickStyle = 'grey';\r\n    resultStr = 'No Action';\r\n    pickStr = (game.spread === 0) \r\n      ? 'PK' \r\n      : formatNeutralPickStr(game); \r\n  } else {\r\n    pickStyle = (game.bet.status === 'PUSH') \r\n      ? 'grey'\r\n      : (game.bet.status === 'WIN') \r\n        ? 'green'\r\n        : 'red';\r\n    resultStr = game.bet.units + ' Unit ' + game.bet.status;\r\n\r\n    pickStr = (game.spread === 0)\r\n      ? game.bet.team + ' PK'\r\n      : formatActionPickStr(game);\r\n  }\r\n\r\n  return (\r\n    <div className=\"card border-dark d-inline-flex scorecard\">\r\n      <div className=\"card-body\">\r\n        <div className=\"row\">\r\n          <div className=\"col-3\">\r\n            <img className={\"team-logo away \" + game.awayTeam.abbreviation} src={awayLogoLink} loading=\"eager\" alt={game.awayTeam.abbreviation}></img>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <p className=\"score-type h5toh4\">Final Score</p>\r\n            <p className=\"score-num\">{game.score.away + ' - ' + game.score.home}</p>\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <img className={\"team-logo home \" + game.homeTeam.abbreviation} src={homeLogoLink} loading=\"eager\" alt={game.homeTeam.abbreviation}></img>\r\n          </div>\r\n        </div>\r\n        <div className=\"row projected-row\">\r\n          <div className=\"col-3\">\r\n            <p className=\"h5toh4\">{game.predScore.away.toFixed(1)}</p>\r\n          </div>\r\n          <div className=\"col-6\">\r\n            <h5 className=\"text-center proj-score\">Projected Score</h5>\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <p className=\"h5toh4\">{game.predScore.home.toFixed(1)}</p>\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col\"><span className={\"float-left spread line \" + pickStyle}>{pickStr}</span></div>\r\n          <div className=\"col\"><span className={\"float-right spread pick \" + pickStyle}>{resultStr}</span></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default FinalGame;","import React from 'react';\r\nimport ProjectedGame from './ProjectedGame.js';\r\nimport FinalGame from './FinalGame.js';\r\n\r\nconst Scoreboard = ({ games }) => {\r\n  \r\n  return (\r\n    <div className=\"row\">\r\n      <div className=\"col\">\r\n        {games.map((game) => (\r\n          (game.score.away === -1 && game.score.home === -1)\r\n            ? ProjectedGame(game)\r\n            : FinalGame(game)\r\n        ))}\r\n      </div>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Scoreboard;\r\n","import React, { Component } from 'react';\r\nimport DatePicker from 'react-datepicker';\r\nimport Scoreboard from '../components/Scoreboard/Scoreboard.js';\r\n\r\nimport './scores.css';\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\n\r\nclass ScoresContainer extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      games: [],\r\n      date: new Date(),\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getGames(this.state.date);\r\n  }\r\n\r\n  convertDate(date) {\r\n    var dateStr = date.getFullYear().toString();\r\n    var dateMonth = (date.getMonth() + 1).toString();\r\n    (dateMonth.length === 1) \r\n      ? dateStr += ('0' + dateMonth)\r\n      : dateStr += dateMonth\r\n    var dateDay = date.getDate().toString();\r\n    (dateDay.length === 1) \r\n      ? dateStr += ('0' + dateDay)\r\n      : dateStr += dateDay\r\n\r\n    return dateStr;\r\n  }\r\n\r\n  getGames(date) {\r\n    var dateStr = this.convertDate(date);\r\n    (window.location.href.includes('localhost'))\r\n    ? fetch('http://localhost:3001/api/getGames/' + dateStr)\r\n      .then((data) => data.json())\r\n      .then((res) => this.setState({ games: res.data, date: date }))\r\n    : fetch('https://www.nbaneural.net/api/getGames/' + dateStr)\r\n        .then((data) => data.json())\r\n        .then((res) => this.setState({ games: res.data, date: date }));\r\n  }\r\n\r\n  render() {\r\n    const ButtonDateInput = ({ value, onClick }) => (\r\n      <button className=\"btn date-selector\" onClick={onClick}>\r\n        {value}\r\n      </button>\r\n    );\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\" id=\"scores\">\r\n          <div className=\"col-7 col-md-10\">\r\n            <h2>Scores</h2>\r\n          </div>\r\n          <div className='col-5 col-md-2'>\r\n            <DatePicker\r\n              todayButton=\"Today\"\r\n              selected={this.state.date}\r\n              onChange={date => this.getGames(date)}\r\n              customInput={<ButtonDateInput />}\r\n              popperModifiers={{\r\n                preventOverflow: {\r\n                  enabled: true,\r\n                  escapeWithReference: false,\r\n                  boundariesElement: \"viewport\",\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n        {this.state.games.length === 0\r\n            ? <center><h4 className='no-games grey'>No games on this date!</h4></center>\r\n            : <Scoreboard games={this.state.games}/>}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ScoresContainer;","import React, { Component } from 'react';\r\nimport Navbar from './components/Navbar/Navbar.js'; \r\nimport PageHeader from './components/PageHeader/PageHeader.js';\r\nimport ScoresContainer from './containers/ScoresContainer.js';\r\n \r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass App extends Component {\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Navbar/>\r\n        <PageHeader/>\r\n        <ScoresContainer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}